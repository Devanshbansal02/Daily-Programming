class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<int> dp(n, 1);
        vector<int> p(n, -1); 
        int len = 1, index = 0; 
        for(int i = 1; i < n; i++) {
            for(int j = 0; j < i; j++) {
                if(nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1) {
                    dp[i] = dp[j] + 1;
                    p[i] = j;
                }
            }
            if(dp[i] > len) {
                len = dp[i];
                index = i;
            }
        }
        vector<int> chirag;
        while(index != -1) {
            chirag.push_back(nums[index]);
            index = p[index];
        }
        return chirag;
    }
};
